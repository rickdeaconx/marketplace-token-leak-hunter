name: Tests

on:
  push:
    branches: ['*']
  pull_request:
    branches: [master, main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.11', '3.12']

    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    name: Code Quality

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black

      - name: Check code formatting with black
        run: |
          black --check src/ tests/

      - name: Lint with flake8
        run: |
          flake8 src/ tests/ --max-line-length=120 --extend-ignore=E203,W503

  integration-test:
    runs-on: ubuntu-latest
    name: Integration Test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run scanner against sample data
        run: |
          python -m src.scan_repo --path sample-data/repo-sample --out test-report.json --csv test-report.csv || true

      - name: Verify scan found issues
        run: |
          if [ ! -f test-report.json ]; then
            echo "Error: Report not generated"
            exit 1
          fi
          findings=$(python -c "import json; data=json.load(open('test-report.json')); print(data['scan_summary']['total_findings'])")
          if [ "$findings" -lt 1 ]; then
            echo "Error: No findings detected in sample data"
            exit 1
          fi
          echo "âœ“ Found $findings issues in sample data"

      - name: Upload test report
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-report
          path: |
            test-report.json
            test-report.csv
