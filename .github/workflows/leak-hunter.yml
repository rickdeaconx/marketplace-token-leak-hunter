name: Marketplace Token Leak Hunter

on:
  push:
    branches: ['*']
  workflow_dispatch:
    inputs:
      fail_on_high:
        description: 'Fail job on high confidence findings'
        required: false
        type: boolean
        default: true

jobs:
  scan-for-leaks:
    runs-on: ubuntu-latest
    name: Scan for token leaks

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install requests pytest

      - name: Run token leak scanner
        id: scan
        continue-on-error: true
        run: |
          python -m src.scan_repo --path . --out leak-report.json --csv leak-report.csv

      - name: Upload scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: leak-scan-report
          path: |
            leak-report.json
            leak-report.csv
          retention-days: 90

      - name: Check scan results and fail if needed
        if: steps.scan.outcome == 'failure' && (github.event.inputs.fail_on_high == 'true' || github.event.inputs.fail_on_high == '')
        run: |
          # Check if findings are only in expected locations (test data, docs, examples)
          findings=$(python -c "import json; data=json.load(open('leak-report.json')); print(sum(1 for f in data['findings'] if not any(p in f['path'] for p in ['sample-data/', 'allowlist.txt.example', 'README.md', 'docs/', '.github/ISSUE_TEMPLATE/'])))")

          if [ "$findings" -gt 0 ]; then
            echo "::error::Unexpected token leak(s) detected outside of test data! Review the uploaded artifact."
            echo "Found $findings finding(s) in non-test files."
            echo "Action: Review leak-report.json, revoke any leaked tokens, and rotate credentials."
            exit 1
          else
            echo "âœ“ All findings are in expected test data locations (sample-data/, docs/, examples)"
            echo "No real secrets detected - repository is clean."
          fi
