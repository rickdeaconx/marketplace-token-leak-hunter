================================================================================
MARKETPLACE TOKEN LEAK HUNTER - GETTING STARTED
================================================================================

REPOSITORY STRUCTURE:
--------------------
marketplace-token-leak-hunter/
├── .github/
│   ├── workflows/
│   │   └── leak-hunter.yml          # GitHub Action workflow
│   └── ISSUE_TEMPLATE/
│       └── report-leak.md           # Issue template for reporting leaks
├── docs/
│   └── OPERATIONAL_NOTES.md         # Detailed operational guide
├── sample-data/
│   └── repo-sample/                 # Sample repo with fake tokens
│       ├── .github/workflows/
│       │   └── publish.yml
│       ├── .npmrc
│       ├── package.json
│       └── README.md
├── src/
│   ├── __init__.py
│   ├── scan_repo.py                 # Main scanner entrypoint
│   ├── rules.py                     # Detection rules engine
│   ├── report.py                    # Report generation
│   └── utils.py                     # Utility functions
├── tests/
│   ├── __init__.py
│   └── test_scan_basic.py           # Unit tests
├── .gitignore
├── LICENSE
└── README.md

QUICK START COMMANDS:
--------------------

1. Install dependencies:
   pip3 install requests pytest

2. Run tests:
   python3 -m pytest tests/test_scan_basic.py -v

3. Scan sample repository:
   python3 -m src.scan_repo --path sample-data/repo-sample --out report.json --csv report.csv

4. Scan current directory:
   python3 -m src.scan_repo --path . --out leak-report.json --csv leak-report.csv

5. Scan remote repository (requires GitHub token):
   export GITHUB_TOKEN="your_token_here"
   python3 -m src.scan_repo --repo owner/repo --github-token $GITHUB_TOKEN --out report.json --csv report.csv

TEST RESULTS:
------------
✓ All 4 unit tests pass
✓ Sample scan detects 4 intentional fake token leaks
✓ Reports generated in JSON and CSV formats
✓ Exit code 2 (critical findings) as expected

ACCEPTANCE CRITERIA - ALL MET:
------------------------------
✓ pytest passes
✓ Scanner detects >= 1 finding with score >= 70 in sample data
✓ Tokens are properly redacted in output (first/last 4 chars only)
✓ GitHub Action YAML is syntactically valid
✓ Exit codes: 0 (clean), 1 (medium), 2 (critical), 3 (error)
✓ JSON and CSV reports generated successfully

NEXT STEPS TO ENABLE IN YOUR REPOSITORY:
----------------------------------------
1. Copy this repository structure to your project
2. Ensure .github/workflows/leak-hunter.yml is committed
3. Push to GitHub - the Action will run automatically
4. Review scan artifacts in the Actions tab
5. Add any false positives to allowlist.txt in repo root
6. Configure fail_on_high input in workflow_dispatch if needed

MANUAL OPERATOR CHECKLIST:
--------------------------
[ ] Install dependencies: pip3 install requests pytest
[ ] Run unit tests: python3 -m pytest tests/ -v
[ ] Test against sample data to verify detection works
[ ] Review and customize rules in src/rules.py for your use case
[ ] Copy .github/workflows/leak-hunter.yml to target repositories
[ ] Enable GitHub Actions in repository settings
[ ] Configure branch protection to require leak scan passing
[ ] Set up notifications for scan failures (Slack, email, etc.)
[ ] Create allowlist.txt for known false positives
[ ] Document incident response process for detected leaks
[ ] Train team on proper secrets management practices
[ ] Schedule quarterly review of detection rules effectiveness

SECURITY NOTES:
--------------
- Never commit real tokens to test the scanner
- All sample tokens use FAKE_ prefix and are obviously synthetic
- Reports automatically redact matched tokens
- Remote mode requires GitHub token with repo:read scope
- Rate limit: 5000 API requests/hour (authenticated)
- The scanner performs static analysis only - cannot detect runtime secrets

SUPPORT:
-------
- README.md: Quick start and usage examples
- docs/OPERATIONAL_NOTES.md: Detailed operations guide
- .github/ISSUE_TEMPLATE/report-leak.md: Template for reporting leaks

================================================================================
